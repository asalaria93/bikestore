

-- 1 first step data cleaning by changing null values of phone into a 0000 values 
Update customers 
set Phone = '000000' 
where phone is Null;

-- 2 checking if order_items has any NULL value
select * from order_items 
where 
order_id is Null or
item_id is Null or
product_id is Null or 
quantity is Null or
list_price is Null or
discount is Null
;

-- 2.1 checking if products has any NULL value

select * from products 
where 
product_id is Null or
product_name is Null or
brand_id is Null or 
category_id is Null or
model_year is Null or
list_price is Null
;


-- 3.0 JOINING ORDERS AND CUSTOMERS TABLES
select * from orders;
select * from customers;

select o.order_id, o.customer_id, o.order_status,o.required_date, o.shipped_date, o.store_id, o.staff_id, c.first_name, c.last_name, c.phone, c.email, c.street, c.city, c.state, c.zip_code 
from orders o
left join customers c
on o.customer_id=c.customer_id
union
select o.order_id, o.customer_id, o.order_status,o.required_date, o.shipped_date, o.store_id, o.staff_id, c.first_name, c.last_name, c.phone, c.email, c.street, c.city, c.state, c.zip_code 
from orders o
right join customers c
on o.customer_id=c.customer_id
;

-- 3.1 converting it into a VIEW

create view full_orderdata2 as
(select o.order_id, o.customer_id, o.order_status,o.required_date, o.shipped_date, o.store_id, o.staff_id, c.first_name, c.last_name, c.phone, concat(street, ",", city, ",", state,",", zip_code) as full_address  
from orders o
left join customers c
on o.customer_id=c.customer_id
union
select o.order_id, o.customer_id, o.order_status,o.required_date, o.shipped_date, o.store_id, o.staff_id, c.first_name, c.last_name, c.phone, concat(street, ",", city, ",", state,",", zip_code) as full_address  
from orders o
right join customers c
on o.customer_id=c.customer_id
)
;

select * from full_orderdata1;

select *,concat(street, ",", city, ",", state,",", zip_code) as full_address from full_orderdata1 
;

create table Fullpurchase_data as
select o.order_id, o.customer_id, o.order_status,o.required_date, o.shipped_date, o.store_id, o.staff_id, c.first_name, c.last_name, c.phone, c.email, concat(street, ",", city, ",", state,",", zip_code) as full_address  
from orders o
left join customers c
on o.customer_id=c.customer_id
union
select o.order_id, o.customer_id, o.order_status,o.required_date, o.shipped_date, o.store_id, o.staff_id, c.first_name, c.last_name, c.phone, c.email, concat(street, ",", city, ",", state,",", zip_code) as full_address  
from orders o
right join customers c
on o.customer_id=c.customer_id
;

select * from products;
select * from fullpurchase_data3;
select * from stocks;
select * from order_items;

create table fullpurchase_data4 as
select fpd.order_id, fpd.customer_id, fpd.order_status, fpd.required_date, fpd.shipped_date, fpd.store_id, fpd.staff_id, fpd.first_name, fpd.last_name, fpd.phone, 
fpd.full_address, fpd.email,
oi.item_id, oi.product_id, oi.quantity, oi.list_price, oi.discount, Round(((oi.quantity*oi.list_price)*(1-oi.discount)),2) as final_cost
from fullpurchase_data fpd
join 
order_items oi
on
fpd.order_id=oi.order_id
;


drop table fullpurchase_data4;
select * from fullpurchase_data4 order by shipped_date desc;

-- 4 find all the customers who purchased multiple times in last 1 year and add them to loyal customer list

select first_name, last_name, customer_id, email, count(*) as purchase_count from fullpurchase_data4 
where shipped_date Between '2017-04-01' and '2018-04-01' 
group by first_name, last_name, customer_id, email
having count(*)>1
order by purchase_count Desc
;

-- 5 find all the customers who purchased multiple items or else over $5000 of purchase in last 1 year and add them to premium customer list
With premium_customer1 as(
select first_name, last_name, email, shipped_date,
case
when final_cost > 5000 then 'yes'
else 'no'
end as premium_customer
from fullpurchase_data4
where shipped_date Between '2017-04-01' and '2018-04-01') 

select DISTINCT first_name, last_name, email, shipped_date 
from premium_customer1
where premium_customer = 'yes'
;

-- 6 Total Revenue and Top-Contributing Products/Categories
-- 6.1 Total revenue generated in the last year
select * from fullpurchase_data4;

select round(sum(coalesce(quantity, 0) * coalesce(list_price, 0) * (1 - coalesce(discount, 0))), 2) as total_revenue
from fullpurchase_data4
where shipped_date is not null 
and shipped_date between '2017-04-01' and '2018-04-01';

-- 6.2 Top-contributing products by revenue
select product_id, round(sum((quantity * list_price) * (1 - discount)), 2) as revenue
from fullpurchase_data4
group by product_id
order by revenue desc
limit 10;

-- 6.3 Top-contributing categories by revenue
select p.category_id, round(sum((oi.quantity * oi.list_price) * (1 - oi.discount)), 2) as revenue
from order_items oi
join products p on oi.product_id = p.product_id
group by p.category_id
order by revenue desc
limit 10;

-- 7 Top-Selling Products by Quantity and Revenue
-- 7.1 Top-selling products by quantity
select product_id, sum(quantity) as total_quantity
from fullpurchase_data4
group by product_id
order by total_quantity desc
limit 10;

-- 7.2 Top-selling products by revenue
select product_id, round(sum((quantity * list_price) * (1 - discount)), 2) as revenue
from fullpurchase_data4
group by product_id
order by revenue desc
limit 10;

